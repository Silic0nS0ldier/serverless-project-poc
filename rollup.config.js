import fs from "fs";
import babel from "rollup-plugin-babel";
import del from "del";
import nodeResolve from "rollup-plugin-node-resolve";
import cjs from "rollup-plugin-commonjs";
import camelCase from "just-camel-case";

export default async function ()
{
    // Clear out old artefacts, add delay to allow OS chance to catch up
    await del("./artefacts/**");
    await new Promise(function (resolve)
    {
        setTimeout(resolve, 50);
    });

    fs.mkdirSync("./artefacts/dist/", {
        recursive: true
    });
    fs.mkdirSync("./artefacts/gen/azure-functions/", {
        recursive: true
    });
    fs.mkdirSync("./artefacts/gen/azure-functions/", {
        recursive: true
    });

    const servicePaths = fs.readdirSync("./src/services");

    /** @type {import("rollup").RollupOptions[]} */
    const configs = [];

    // Azure Functions
    servicePaths.forEach(servicePath => {
        const glueFile =
`// This file is automatically generated during build
import func from "../../../src/services/${servicePath}";
import driver from "../../../src/drivers/azure-functions.js";

export default driver(func);
`;

        const gluePath = "./artefacts/gen/azure-functions/" + servicePath;

        fs.writeFileSync(gluePath, glueFile, {
            flag: "w",
        });
        
        configs.push({
            input: gluePath,
            output: {
                file: "./artefacts/dist/" + servicePath,
                format: "cjs",
                preferConst: true,
            },
            plugins: [
                babel({
                    exclude: "node_modules/**",
                }),
                nodeResolve(),
                cjs(),
            ]
        });
    });

    // Express
    configs.push(
        (function () {
            let entrypointFile =
`// This file  is automatically generated during build
import express from "express";
import driver from "../../src/drivers/express.js";
`;

            servicePaths.forEach(servicePath => {
                const endpointName = servicePath.split(".").slice(0, -1).join(".");
                const endpointImportName = camelCase(endpointName);

                entrypointFile +=
`
import ${endpointImportName} from "../../src/services/${servicePath}";`;
            });

            entrypointFile +=
`

const app = express();
const port = 3000;
`;

            servicePaths.forEach(servicePath => {
                const endpointName = servicePath.split(".").slice(0, -1).join(".");
                const endpointImportName = camelCase(endpointName);

                entrypointFile +=
`
app.get("/${endpointName}", driver(${endpointImportName}));
app.post("/${endpointName}", driver(${endpointImportName}));`;
            });


            entrypointFile +=
`

app.listen(port, console.log(\`Listening on port \${port}\`));
`;

            const entrypointPath = "./artefacts/gen/express.js";

            fs.writeFileSync(entrypointPath, entrypointFile, {
                flag: "w",
            });

            /** @type {import("rollup").RollupOptions} */
            const config = {
                input: entrypointPath,
                output: {
                    file: "./artefacts/dist/express.js",
                    format: "cjs",
                    preferConst: true,
                    globals: {
                        express: true
                    }
                },
                plugins: [
                    babel({
                        exclude: "node_modules/**",
                    }),
                    nodeResolve(),
                    cjs(),
                ],
                external: [
                    "express"
                ]
            };

            return config;
        })()
    );

    return configs;
}
